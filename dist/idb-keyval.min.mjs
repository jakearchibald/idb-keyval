class Store{constructor(e="keyval-store",t="keyval"){this.storeName=t,this._dbp=new Promise((r,o)=>{const n=indexedDB.open(e,1);n.onerror=(()=>o(n.error)),n.onsuccess=(()=>r(n.result)),n.onupgradeneeded=(()=>{n.result.createObjectStore(t)})})}_withIDBStore(e,t){return this._dbp.then(r=>new Promise((o,n)=>{const s=r.transaction(this.storeName,e);s.oncomplete=(()=>o()),s.onabort=s.onerror=(()=>n(s.error)),t(s.objectStore(this.storeName))}))}}let store;function getDefaultStore(){return store||(store=new Store),store}function get(e,t=getDefaultStore()){let r;return t._withIDBStore("readonly",t=>{r=t.get(e)}).then(()=>r.result)}function set(e,t,r=getDefaultStore()){return r._withIDBStore("readwrite",r=>{r.put(t,e)})}function del(e,t=getDefaultStore()){return t._withIDBStore("readwrite",t=>{t.delete(e)})}function clear(e=getDefaultStore()){return e._withIDBStore("readwrite",e=>{e.clear()})}function keys(e=getDefaultStore()){const t=[];return e._withIDBStore("readonly",e=>{(e.openKeyCursor||e.openCursor).call(e).onsuccess=function(){this.result&&(t.push(this.result.key),this.result.continue())}}).then(()=>t)}export{Store,get,set,del,clear,keys};